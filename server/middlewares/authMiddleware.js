const jwt = require("jsonwebtoken");
const User = require("../models/user.js");
const {asyncFunction} = require("../utils/helper.js");

const jwtSecretKey = process.env.JWT_SECRET_KEY;

// using(Checking) both  Bearer "headers.authorization" and "cookies" to send token
const authMiddleware = asyncFunction(async (req, res, next) => {
  // Check 1: verify if the token is present
  // Check 2: if the jwt is generated by our web app
  // Check 3: expiry of the token
  // Check 4:Get the user from DB and match the token ID

  //Check 1: verify if the token is present
  // const token = req.headers.authorization;
  // const token = req.headers.authorization?.startsWith("Bearer")
  //   ? req.headers.authorization.split(" ")[1]
  //   : null;
  const token = req.cookies?.token;
  // console.log(token);

  // 400=>Bad request
  // 401=> Unauthorized
  if (!token) {
    console.log("Token not found, Token Required!");
    return res.status(401).json({
      success: false,
      message: "Authentication failed, please login again",
    });
  }

  //Check 2: if the jwt is generated by our web app
  // jwt.verify(token, jwtSecretKey, {}, async (err, decodedToken) => {
  //   if (err) {
  //     // throw new Error(`Token verification failed : ", ${err}`);
  //     console.log("Token Verification failed");
  //     return res.status(401).json({
  //       success: false,
  //       message: "Authentication failed,Please login again!",
  //     });
  //   }
  // });

  try {
    // const isTokenValid = jwt.verify(token, jwtSecretKey);
    // console.log(isTokenValid);
    jwt.verify(token, jwtSecretKey); // this will internally verify exp time
  } catch (err) {
    console.log("Token not verified: ", err);
    return res.status(400).json({
      success: false,
      message: "Please login again!",
    });
  }

  //Check 3: expiry of the token
  // const decodedToken = jwt.decode(token);
  // const now = Math.floor(Date.now() / 1000);

  // if (now > decodedToken.exp) {
  //   //token has expired
  //   console.log("Token Expired");
  //   return res.status(400).json({
  //     success: false,
  //     message: "Session expired, please login again!",
  //   });
  // }

  // Check 4:Get the user from DB and match the token ID
  const decodedToken = jwt.verify(token, jwtSecretKey);
  // console.log(decodedToken);
  const user = await User.findById(decodedToken._id).select("-password");
  if (user.token != token) {
    return res.status(401).json({
      success: false,
      message: "Please login again!",
    });
  }

  req.user = user;
  next();
});

module.exports = authMiddleware;
